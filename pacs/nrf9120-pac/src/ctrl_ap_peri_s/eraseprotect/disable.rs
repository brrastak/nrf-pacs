# [doc = "Register `DISABLE` reader"] pub type R = crate :: R < DisableSpec > ; # [doc = "Register `DISABLE` writer"] pub type W = crate :: W < DisableSpec > ; # [doc = "Field `KEY` reader - The ERASEALL sequence is initiated if the value of the KEY fields are non-zero and the KEY fields match on both the CPU and debugger sides."] pub type KeyR = crate :: FieldReader < u32 > ; # [doc = "Field `KEY` writer - The ERASEALL sequence is initiated if the value of the KEY fields are non-zero and the KEY fields match on both the CPU and debugger sides."] pub type KeyW < 'a , REG > = crate :: FieldWriter < 'a , REG , 32 , u32 > ; impl R { # [doc = "Bits 0:31 - The ERASEALL sequence is initiated if the value of the KEY fields are non-zero and the KEY fields match on both the CPU and debugger sides."] # [inline (always)] pub fn key (& self) -> KeyR { KeyR :: new (self . bits) } } impl W { # [doc = "Bits 0:31 - The ERASEALL sequence is initiated if the value of the KEY fields are non-zero and the KEY fields match on both the CPU and debugger sides."] # [inline (always)] # [must_use] pub fn key (& mut self) -> KeyW < DisableSpec > { KeyW :: new (self , 0) } } # [doc = "This register disables the ERASEPROTECT register and performs an ERASEALL operation.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`disable::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`disable::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct DisableSpec ; impl crate :: RegisterSpec for DisableSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`disable::R`](R) reader structure"] impl crate :: Readable for DisableSpec { } # [doc = "`write(|w| ..)` method takes [`disable::W`](W) writer structure"] impl crate :: Writable for DisableSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; } # [doc = "`reset()` method sets DISABLE to value 0"] impl crate :: Resettable for DisableSpec { const RESET_VALUE : u32 = 0 ; }