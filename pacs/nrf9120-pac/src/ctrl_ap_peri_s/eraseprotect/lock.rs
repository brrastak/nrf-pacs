# [doc = "Register `LOCK` reader"] pub type R = crate :: R < LockSpec > ; # [doc = "Register `LOCK` writer"] pub type W = crate :: W < LockSpec > ; # [doc = "Lock ERASEPROTECT.DISABLE register from being written until next reset\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Lock { # [doc = "0: Register ERASEPROTECT.DISABLE is writeable"] Unlocked = 0 , # [doc = "1: Register ERASEPROTECT.DISABLE is read-only"] Locked = 1 , } impl From < Lock > for bool { # [inline (always)] fn from (variant : Lock) -> Self { variant as u8 != 0 } } # [doc = "Field `LOCK` reader - Lock ERASEPROTECT.DISABLE register from being written until next reset"] pub type LockR = crate :: BitReader < Lock > ; impl LockR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Lock { match self . bits { false => Lock :: Unlocked , true => Lock :: Locked , } } # [doc = "Register ERASEPROTECT.DISABLE is writeable"] # [inline (always)] pub fn is_unlocked (& self) -> bool { * self == Lock :: Unlocked } # [doc = "Register ERASEPROTECT.DISABLE is read-only"] # [inline (always)] pub fn is_locked (& self) -> bool { * self == Lock :: Locked } } # [doc = "Field `LOCK` writer - Lock ERASEPROTECT.DISABLE register from being written until next reset"] pub type LockW < 'a , REG > = crate :: BitWriter < 'a , REG , Lock > ; impl < 'a , REG > LockW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Register ERASEPROTECT.DISABLE is writeable"] # [inline (always)] pub fn unlocked (self) -> & 'a mut crate :: W < REG > { self . variant (Lock :: Unlocked) } # [doc = "Register ERASEPROTECT.DISABLE is read-only"] # [inline (always)] pub fn locked (self) -> & 'a mut crate :: W < REG > { self . variant (Lock :: Locked) } } impl R { # [doc = "Bit 0 - Lock ERASEPROTECT.DISABLE register from being written until next reset"] # [inline (always)] pub fn lock (& self) -> LockR { LockR :: new ((self . bits & 1) != 0) } } impl W { # [doc = "Bit 0 - Lock ERASEPROTECT.DISABLE register from being written until next reset"] # [inline (always)] # [must_use] pub fn lock (& mut self) -> LockW < LockSpec > { LockW :: new (self , 0) } } # [doc = "This register locks the ERASEPROTECT.DISABLE register from being written until next reset.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`lock::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`lock::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct LockSpec ; impl crate :: RegisterSpec for LockSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`lock::R`](R) reader structure"] impl crate :: Readable for LockSpec { } # [doc = "`write(|w| ..)` method takes [`lock::W`](W) writer structure"] impl crate :: Writable for LockSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; } # [doc = "`reset()` method sets LOCK to value 0"] impl crate :: Resettable for LockSpec { const RESET_VALUE : u32 = 0 ; }