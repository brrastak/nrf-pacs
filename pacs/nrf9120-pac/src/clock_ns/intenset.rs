# [doc = "Register `INTENSET` reader"] pub type R = crate :: R < IntensetSpec > ; # [doc = "Register `INTENSET` writer"] pub type W = crate :: W < IntensetSpec > ; # [doc = "Write '1' to enable interrupt for event HFCLKSTARTED\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Hfclkstarted { # [doc = "0: Read: Disabled"] Disabled = 0 , # [doc = "1: Read: Enabled"] Enabled = 1 , } impl From < Hfclkstarted > for bool { # [inline (always)] fn from (variant : Hfclkstarted) -> Self { variant as u8 != 0 } } # [doc = "Field `HFCLKSTARTED` reader - Write '1' to enable interrupt for event HFCLKSTARTED"] pub type HfclkstartedR = crate :: BitReader < Hfclkstarted > ; impl HfclkstartedR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Hfclkstarted { match self . bits { false => Hfclkstarted :: Disabled , true => Hfclkstarted :: Enabled , } } # [doc = "Read: Disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Hfclkstarted :: Disabled } # [doc = "Read: Enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Hfclkstarted :: Enabled } } # [doc = "Write '1' to enable interrupt for event HFCLKSTARTED\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum HfclkstartedWO { # [doc = "1: Enable"] Set = 1 , } impl From < HfclkstartedWO > for bool { # [inline (always)] fn from (variant : HfclkstartedWO) -> Self { variant as u8 != 0 } } # [doc = "Field `HFCLKSTARTED` writer - Write '1' to enable interrupt for event HFCLKSTARTED"] pub type HfclkstartedW < 'a , REG > = crate :: BitWriter < 'a , REG , HfclkstartedWO > ; impl < 'a , REG > HfclkstartedW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Enable"] # [inline (always)] pub fn set_ (self) -> & 'a mut crate :: W < REG > { self . variant (HfclkstartedWO :: Set) } } # [doc = "Write '1' to enable interrupt for event LFCLKSTARTED\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum Lfclkstarted { # [doc = "0: Read: Disabled"] Disabled = 0 , # [doc = "1: Read: Enabled"] Enabled = 1 , } impl From < Lfclkstarted > for bool { # [inline (always)] fn from (variant : Lfclkstarted) -> Self { variant as u8 != 0 } } # [doc = "Field `LFCLKSTARTED` reader - Write '1' to enable interrupt for event LFCLKSTARTED"] pub type LfclkstartedR = crate :: BitReader < Lfclkstarted > ; impl LfclkstartedR { # [doc = "Get enumerated values variant"] # [inline (always)] pub const fn variant (& self) -> Lfclkstarted { match self . bits { false => Lfclkstarted :: Disabled , true => Lfclkstarted :: Enabled , } } # [doc = "Read: Disabled"] # [inline (always)] pub fn is_disabled (& self) -> bool { * self == Lfclkstarted :: Disabled } # [doc = "Read: Enabled"] # [inline (always)] pub fn is_enabled (& self) -> bool { * self == Lfclkstarted :: Enabled } } # [doc = "Write '1' to enable interrupt for event LFCLKSTARTED\n\nValue on reset: 0"] # [derive (Clone , Copy , Debug , PartialEq , Eq)] pub enum LfclkstartedWO { # [doc = "1: Enable"] Set = 1 , } impl From < LfclkstartedWO > for bool { # [inline (always)] fn from (variant : LfclkstartedWO) -> Self { variant as u8 != 0 } } # [doc = "Field `LFCLKSTARTED` writer - Write '1' to enable interrupt for event LFCLKSTARTED"] pub type LfclkstartedW < 'a , REG > = crate :: BitWriter < 'a , REG , LfclkstartedWO > ; impl < 'a , REG > LfclkstartedW < 'a , REG > where REG : crate :: Writable + crate :: RegisterSpec , { # [doc = "Enable"] # [inline (always)] pub fn set_ (self) -> & 'a mut crate :: W < REG > { self . variant (LfclkstartedWO :: Set) } } impl R { # [doc = "Bit 0 - Write '1' to enable interrupt for event HFCLKSTARTED"] # [inline (always)] pub fn hfclkstarted (& self) -> HfclkstartedR { HfclkstartedR :: new ((self . bits & 1) != 0) } # [doc = "Bit 1 - Write '1' to enable interrupt for event LFCLKSTARTED"] # [inline (always)] pub fn lfclkstarted (& self) -> LfclkstartedR { LfclkstartedR :: new (((self . bits >> 1) & 1) != 0) } } impl W { # [doc = "Bit 0 - Write '1' to enable interrupt for event HFCLKSTARTED"] # [inline (always)] # [must_use] pub fn hfclkstarted (& mut self) -> HfclkstartedW < IntensetSpec > { HfclkstartedW :: new (self , 0) } # [doc = "Bit 1 - Write '1' to enable interrupt for event LFCLKSTARTED"] # [inline (always)] # [must_use] pub fn lfclkstarted (& mut self) -> LfclkstartedW < IntensetSpec > { LfclkstartedW :: new (self , 1) } } # [doc = "Enable interrupt\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intenset::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intenset::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."] pub struct IntensetSpec ; impl crate :: RegisterSpec for IntensetSpec { type Ux = u32 ; } # [doc = "`read()` method returns [`intenset::R`](R) reader structure"] impl crate :: Readable for IntensetSpec { } # [doc = "`write(|w| ..)` method takes [`intenset::W`](W) writer structure"] impl crate :: Writable for IntensetSpec { type Safety = crate :: Unsafe ; const ZERO_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; const ONE_TO_MODIFY_FIELDS_BITMAP : u32 = 0 ; } # [doc = "`reset()` method sets INTENSET to value 0"] impl crate :: Resettable for IntensetSpec { const RESET_VALUE : u32 = 0 ; }